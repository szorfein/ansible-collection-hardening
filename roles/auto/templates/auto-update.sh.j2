#!/usr/bin/env sh

set -o errexit -o nounset

LOG={{ auto_update_logfile }}
CONFIG={{ auto_update_configfile }}

[ -f "$CONFIG" ] && . "$CONFIG"

TODAY_YEAR="$(date +%Y)"
TODAY_MONTH="$(date +%m)"
TODAY_DAY="$(date +%d)"
TODAY_FULL="$TODAY_YEAR:$TODAY_MONTH:$TODAY_DAY"

die() { echo "[-] $1"; exit 1; }

# arg 1: day1, arg 2: day2
compare_to_today() {
  NEXT=$(( $1 + $2 ))
  echo "last $1, next = $NEXT, today = $TODAY_DAY"
  if [ $NEXT -le $TODAY_DAY ] ; then
    return 0
  else
    return 1
  fi
}

exe() {
  echo ">> $1 with $2"
  $2
  if [ "$?" -eq 0 ] ; then
    sed -i "/Last $1/d" "$LOG"
    echo "$TODAY_FULL > Last $1 success with $2." >> "$LOG"
  else
    echo "$TODAY_FULL > Last $1 failed with $2." >> "$LOG"
  fi
}

# do action if compare_to_today pass or logfile is empty
checking() {
  LAST_THING="$(grep -i "last $1 success" "$LOG" | awk '{print $1}')"
  if [ -n "$LAST_THING" ] ; then
    IFS=: read -r _ _ d <<< $LAST_THING
    if compare_to_today "$d" "$2" ; then
      exe "$1" "$3"
    else
      echo "Next day maybe."
    fi
  else
    exe "$1" "$3"
  fi
}

check_download_pkgs() {
  checking "download pkgs" "$DOWNLOAD_PKGS_DAY" "$DOWNLOAD_PKGS_CMD"
}

check_clean_cache() {
  checking "clean cache" "$CLEAN_CACHE_DAY" "$CLEAN_CACHE_CMD"
}

main() {
  [ "$(id -u)" -eq 0 ] || die "Need to be run as root !"

  [ -f "$LOG" ] || touch "$LOG"

  check_download_pkgs
  check_clean_cache
}

main "$@"
