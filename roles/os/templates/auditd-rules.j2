# Generated by Ansible role {{ ansible_role_name }}

# based on https://github.com/Neo23x0/auditd
# https://github.com/alphagov/puppet-auditd/pull/1
# https://highon.coffee/blog/security-harden-centos-7/#auditd---audit-daemon
# https://github.com/linux-audit/audit-userspace/tree/master/rules
# https://linux-audit.com/tuning-auditd-high-performance-linux-auditing/

# Remove any existing rules
-D

# Buffer Size
## Feel free to increase this if the machine panic's
-b 8192

# Failure Mode
## Possible values: 0 (silent), 1 (printk, print a failure message), 2 (panic, halt the system)
-f 1

# Ignore errors
## e.g. caused by users or files not found in the local environment
-i

# Self Auditing ---------------------------------------------------------------

## Audit the audit logs
### Successful and unsuccessful attempts to read information from the audit records
{% for record in os_audit_records | sort %}
-w {{ record }} -p wra -k auditlog
{% endfor %}

## Auditd configuration
### Modifications to audit configuration that occur while the audit collection functions are operating
{% for config in os_audit_configs | sort %}
-w {{ config }} -p wa -k auditconfig
{% endfor %}

## Monitor for use of audit management tools
{% for bin in os_audit_bins | sort %}
-w {{ bin }} -p x -k audittools
{% endfor %}

## Access to all audit trails

{% for tool in os_audit_tools | sort %}
-a always,exit -F path={{ tool }} -F perm=x -k audittools
{% endfor %}

# Filters ---------------------------------------------------------------------

### We put these early because audit is a first match wins system.

## Ignore SELinux AVC records
-a always,exclude -F msgtype=AVC

## Ignore current working directory records
-a always,exclude -F msgtype=CWD

## Cron jobs fill the logs with stuff we normally don't want (works with SELinux)
-a never,user -F subj_type=crond_t
-a never,exit -F subj_type=crond_t

## This is not very interesting and wastes a lot of space if the server is public facing
-a always,exclude -F msgtype=CRYPTO_KEY_USER

## High Volume Event Filter (especially on Linux Workstations)
-a never,exit -F arch=b64 -F dir=/dev/shm -k sharedmemaccess

## More information on how to filter events
### https://access.redhat.com/solutions/2482221

# Rules -----------------------------------------------------------------------

## Kernel parameters
-w /etc/sysctl.conf -p wa -k sysctl
-w /etc/sysctl.d -p wa -k sysctl

## SSH configuration
-w /etc/ssh/sshd_config -k sshd
-w /etc/ssh/sshd_config.d -k sshd

# Special Rules ---------------------------------------------------------------

## Injection
### These rules watch for code injection by the ptrace facility.
### This could indicate someone trying to do something bad or just debugging
-a always,exit -F arch=b64 -S ptrace -F a0=0x4 -k code_injection
-a always,exit -F arch=b64 -S ptrace -F a0=0x5 -k data_injection
-a always,exit -F arch=b64 -S ptrace -F a0=0x6 -k register_injection
-a always,exit -F arch=b64 -S ptrace -k tracing

## Anonymous File Creation
#### These rules watch the use of memfd_create
#### "memfd_create" creates anonymous file and returns a file descriptor to access it
#### When combined with "fexecve" can be used to stealthily run binaries in #memory without touching disk
-a always,exit -F arch=b64 -S memfd_create -F key=anon_file_create

## Privilege Abuse
#### The purpose of this rule is to detect when an admin may be abusing power by looking in user's home dir.
-a always,exit -F dir=/home -F uid=0 -F auid>=1000 -F auid!=-1 -C auid!=obj_uid -k power_abuse

# Socket Creations
# # will catch both IPv4 and IPv6
-a always,exit -F arch=b32 -S socket -F a0=2  -k network_socket_created
-a always,exit -F arch=b64 -S socket -F a0=2  -k network_socket_created

-a always,exit -F arch=b32 -S socket -F a0=10 -k network_socket_created
-a always,exit -F arch=b64 -S socket -F a0=10 -k network_socket_created

# Make The Configuration Immutable --------------------------------------------

##-e 2
